@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Review Your Movie Service</PageTitle>

<h1>Recent Movies</h1>

Here You can see newest movies

@if (@movies == null)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else
{
	<div class="row">
		@foreach (var movie in movies.Results)
		{
			<div class="col-sm-2">
				<div class="card text-center" style="width: 16rem;">
					<img src="@posterPath/@movie.poster_path" class="card-img-top" alt="@movie.title">
					<div class="card-body">
						<h5 class="card-title">@movie.title</h5>
						<p class="card-text">@movie.overview.Substring(0, Math.Min(movie.overview.Length, 100))</p>
						<a href="MovieDetails" class="btn btn-primary">Show movie details</a>
					</div>
				</div>
			</div>
		}
	</div>


}


@code {

	private DiscoverMovie? movies;

	private string posterPath = "https://image.tmdb.org/t/p/original";

	private string requestUri = "https://localhost:44386/api/DiscoverMovies/page";

	private string page = "1";

	protected override async Task OnInitializedAsync()
	{
		//movies = await Http.GetFromJsonAsync<DiscoverMovie>(requestUri);

		var json = JsonConvert.SerializeObject(page);

		movies = new()
			{
				Page = Convert.ToInt32(page)
			};

		var response = await Http.PostAsJsonAsync<DiscoverMovie>(requestUri, movies);

		movies = await response.Content.ReadFromJsonAsync<DiscoverMovie>();

		if (movies.Results == null)
		{
			await JSRuntime.InvokeVoidAsync("alert", movies);
		}
	}

}
