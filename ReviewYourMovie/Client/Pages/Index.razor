@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Manager

<PageTitle>Review Your Movie Service</PageTitle>

<h1>Recent Movies</h1>

<h3>Here You can see newest movies</h3>
<p></p>

<div class="mb-3">
	<input @bind-value=query type="search" class="form-control" id="SearchForMovie" placeholder="Movie Name">
	<p></p>
	<button @onclick="OnInitializedAsync" class="btn btn-primary">Search</button>
</div>

@if (@movies == null)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
else
{
	<div class="row">
		@foreach (var movie in movies.Results)
		{
			<div class="col-lg-2 col-md-3 col-sm-4">
				<div class="card text-center">
					<img src="@posterPath/@movie.poster_path" class="card-img-top" alt="@movie.title">
					<div class="card-body">
						<h5 class="card-title">@movie.title</h5>
						<h6 class="card-subtitle mb-2 text-muted">@movie.release_date</h6>
						<p class="card-text">@movie.overview.Substring(0, Math.Min(movie.overview.Length, 100))</p>
						<button @onclick="@(e => GetMovieDetails(e, movie.id))" class="btn btn-primary">Show movie details</button>
					</div>
				</div>
			</div>
		}
	</div>
	<p></p><p></p><p></p>

	<div class="btn-group d-grid gap-2 d-md-flex justify-content-md-center" role="group">
		<div><button disabled=@IsPageNotToLow @onclick="Previous" type="button" class="btn btn-primary btn-lg">Previous</button></div>
		<div><button type="button" class="btn btn-primary btn-lg">@pageRequest</button></div>
		<div><button disabled=@IsPageNotToHigh @onclick="Next" type="button" class="btn btn-primary btn-lg">Next</button></div>
	</div>
}


@code {

	private DiscoverMovie? movies;

	private MouseEventArgs ev;

	string query;

	bool IsPageNotToLow;
	bool IsPageNotToHigh;

	private string posterPath = "https://image.tmdb.org/t/p/original";

	private string requestUri = "api/DiscoverMovies";

	private int pageRequest = 1;

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(query))
		{
			GetMovies();
		}
		else
		{
			DiscoverMovies();
		}
	}

	private void SetButtonsState()
	{
		if (pageRequest < 2)
		{
			IsPageNotToLow = true;
		}
		else
		{
			IsPageNotToLow = false;
		}
		if (pageRequest > 499)
		{
			IsPageNotToHigh = true;
		}
		else
		{
			IsPageNotToHigh = false;
		}
	}

	private async void Previous()
	{
		pageRequest -= 1;

		await OnInitializedAsync();
	}

	private async void SelectPage(KeyboardEventArgs e, int pageNumber)
	{
		if (pageNumber > 1 && pageNumber < 500)
		{
			pageRequest = pageNumber;
		}
		SetButtonsState();
		await OnInitializedAsync();
	}

	private async void Next()
	{
		pageRequest += 1;

		await OnInitializedAsync();
	}

	private void GetMovieDetails(MouseEventArgs e, int id)
	{
		Manager.NavigateTo($"MovieDetailsPage/{id}");
	}

	private async void DiscoverMovies()
	{
		var response = await Http.PostAsJsonAsync($"{requestUri}/page", pageRequest);

		movies = await response.Content.ReadFromJsonAsync<DiscoverMovie>();

		if (movies?.Results == null)
		{
			await JSRuntime.InvokeVoidAsync("alert", movies);
			return;
		}

		SetButtonsState();
		StateHasChanged();
	}

	private async void GetMovies()
	{
		var pageReq = pageRequest.ToString();

		var dictionary = new Dictionary<string, string>();
		dictionary.Add("page", pageReq);
		dictionary.Add("query", query);

		var json = JsonConvert.SerializeObject(dictionary);

		var response = await Http.PostAsJsonAsync($"{requestUri}/queryandpage", json);

		movies = await response.Content.ReadFromJsonAsync<DiscoverMovie>();

		if (movies?.Results == null)
		{
			await JSRuntime.InvokeVoidAsync("alert", movies);
			return;
		}

		SetButtonsState();
		StateHasChanged();
	}

}
