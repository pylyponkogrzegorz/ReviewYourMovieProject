@page "/login"
@using Newtonsoft.Json.Linq
@using ReviewYourMovie.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject NavigationManager Manager


<div class="card d-flex justify-content-center">
	<h4 class="card-header">Login</h4>
	<div class="card-body">
		<EditForm Model="@user" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<div class="form-group">
				<label>Username</label>
				<InputText @bind-Value="user.Username" class="form-control" />
				<ValidationMessage For="@(() => user.Username)" />
			</div>
			<div class="form-group">
				<label>Password</label>
				<InputText @bind-Value="user.Password" type="password" class="form-control" />
				<ValidationMessage For="@(() => user.Password)" />
			</div>
			<button class="btn btn-primary">Login</button>
			<NavLink href="register" class="btn btn-link">Register</NavLink>
		</EditForm>
	</div>
</div>

@code {
	private UserLoginDto user = new();
	private bool loading;


	private async void OnValidSubmit()
	{
		var result = await Http.PostAsJsonAsync("api/Token/login", user);
		var response = await result.Content.ReadAsStringAsync();

		var token = JObject.Parse(response);
		var value = token["value"].ToString();

		if (result.IsSuccessStatusCode)
		{
			await LocalStorage.SetItemAsync("token", value);
			await AuthStateProvider.GetAuthenticationStateAsync();
			await JSRuntime.InvokeVoidAsync("alert", "Logged succesfully");
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", token);
		}

	}
}
